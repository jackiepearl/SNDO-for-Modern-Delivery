// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Team1FinalProject.DAL;

namespace Team1FinalProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20181107060541_CouponChange")]
    partial class CouponChange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Team1FinalProject.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActiveSell");

                    b.Property<string>("Author");

                    b.Property<decimal>("Cost");

                    b.Property<string>("Description");

                    b.Property<int?>("GenreID");

                    b.Property<int>("Inventory");

                    b.Property<decimal>("Price");

                    b.Property<DateTime>("PublishDate");

                    b.Property<int>("ReorderLevel");

                    b.Property<string>("Title");

                    b.Property<int>("UniqueNum");

                    b.HasKey("BookID");

                    b.HasIndex("GenreID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Team1FinalProject.Models.Coupon", b =>
                {
                    b.Property<string>("CouponID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BeginDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("FreeShip");

                    b.Property<decimal>("PercentOff");

                    b.HasKey("CouponID");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Team1FinalProject.Models.Genre", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenreName");

                    b.HasKey("GenreID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Team1FinalProject.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ProDateArrived");

                    b.Property<DateTime>("ProDatePlaced");

                    b.Property<string>("UserId");

                    b.HasKey("InvoiceID");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Team1FinalProject.Models.InvoiceDet", b =>
                {
                    b.Property<int>("InvoiceDetID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BookCost");

                    b.Property<int?>("BookID");

                    b.Property<int?>("InvoiceID");

                    b.Property<int>("QuantityArrived");

                    b.Property<int>("QuantityOrdered");

                    b.HasKey("InvoiceDetID");

                    b.HasIndex("BookID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("InvoiceDets");
                });

            modelBuilder.Entity("Team1FinalProject.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CouponID");

                    b.Property<decimal>("OrderCost");

                    b.Property<DateTime>("OrderDate");

                    b.Property<decimal>("OrderTotal");

                    b.Property<decimal>("ShipCost");

                    b.Property<string>("Status");

                    b.Property<string>("UserId");

                    b.HasKey("OrderID");

                    b.HasIndex("CouponID");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Team1FinalProject.Models.OrderDet", b =>
                {
                    b.Property<int>("OrderDetID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookID");

                    b.Property<int?>("OrderID");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("TotalBookCost");

                    b.Property<decimal>("TotalBookPrice");

                    b.HasKey("OrderDetID");

                    b.HasIndex("BookID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDets");
                });

            modelBuilder.Entity("Team1FinalProject.Models.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApproverId");

                    b.Property<string>("AuthorId");

                    b.Property<int?>("BookID");

                    b.Property<decimal>("Rating");

                    b.Property<string>("ReviewContent");

                    b.HasKey("ReviewID");

                    b.HasIndex("ApproverId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Team1FinalProject.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("AccountActive");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("CreditCard1");

                    b.Property<string>("CreditCard2");

                    b.Property<string>("CreditCard3");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StAddress");

                    b.Property<string>("State");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int>("UserID");

                    b.Property<string>("UserName");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Team1FinalProject.Models.Book", b =>
                {
                    b.HasOne("Team1FinalProject.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreID");
                });

            modelBuilder.Entity("Team1FinalProject.Models.Invoice", b =>
                {
                    b.HasOne("Team1FinalProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Team1FinalProject.Models.InvoiceDet", b =>
                {
                    b.HasOne("Team1FinalProject.Models.Book", "Book")
                        .WithMany("InvoiceDets")
                        .HasForeignKey("BookID");

                    b.HasOne("Team1FinalProject.Models.Invoice", "Invoice")
                        .WithMany("InvoiceDets")
                        .HasForeignKey("InvoiceID");
                });

            modelBuilder.Entity("Team1FinalProject.Models.Order", b =>
                {
                    b.HasOne("Team1FinalProject.Models.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponID");

                    b.HasOne("Team1FinalProject.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Team1FinalProject.Models.OrderDet", b =>
                {
                    b.HasOne("Team1FinalProject.Models.Book", "Book")
                        .WithMany("OrderDets")
                        .HasForeignKey("BookID");

                    b.HasOne("Team1FinalProject.Models.Order", "Order")
                        .WithMany("OrderDets")
                        .HasForeignKey("OrderID");
                });

            modelBuilder.Entity("Team1FinalProject.Models.Review", b =>
                {
                    b.HasOne("Team1FinalProject.Models.User", "Approver")
                        .WithMany("ReviewsApproved")
                        .HasForeignKey("ApproverId");

                    b.HasOne("Team1FinalProject.Models.User", "Author")
                        .WithMany("ReviewsWritten")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Team1FinalProject.Models.Book", "Book")
                        .WithMany("ReviewsApproved")
                        .HasForeignKey("BookID");
                });
#pragma warning restore 612, 618
        }
    }
}
